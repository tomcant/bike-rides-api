parameters:
    env(BIKES_API_URL): ''
    env(RIDES_API_URL): ''

services:
    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            $bikesApiUrl: '%env(trim-trailing-slash:BIKES_API_URL)%'
            $bikeApiUrlTemplate: '%env(trim-trailing-slash:BIKES_API_URL)%/bikes/bike/{bikeId}'
            $bikeLocationsApiUrlTemplate: '%env(trim-trailing-slash:BIKES_API_URL)%/bikes/bike/{bikeId}/locations?from={from}&to={to}'
            $rideDetailsApiUrlTemplate: '%env(trim-trailing-slash:RIDES_API_URL)%/rides/ride/{rideId}'

    App\:
        resource: '../src/'
        exclude:
            - '../src/Framework/Migrations/'
            - '../src/Framework/Kernel.php'
            - '../src/Foundation/helpers.php'

    #
    # Bikes
    #

    App\BikeRides\Bikes\UserInterface\Http\:
        resource: '../src/BikeRides/Bikes/UserInterface/Http/'
        tags:
            - 'controller.service_arguments'

    #
    # Billing
    #

    App\BikeRides\Billing\UserInterface\Http\:
        resource: '../src/BikeRides/Billing/UserInterface/Http/'
        tags:
            - 'controller.service_arguments'

    App\BikeRides\Billing\Domain\Model\RidePayment\RidePaymentRepository:
        arguments:
            $eventStore: '@billing_event_store'

    billing_event_store:
        class: 'App\BikeRides\Shared\Infrastructure\PostgresEventStore'
        arguments:
            $aggregateEventFactory: '@App\BikeRides\Billing\Domain\Model\RidePayment\Event\RidePaymentEventFactory'
            $dbTableName: 'billing.event_store'

    #
    # Rides
    #

    App\BikeRides\Rides\UserInterface\Http\:
        resource: '../src/BikeRides/Rides/UserInterface/Http/'
        tags:
            - 'controller.service_arguments'

    App\BikeRides\Rides\Domain\Model\Ride\RideRepository:
        arguments:
            $eventStore: '@rides_event_store'

    rides_event_store:
        class: 'App\BikeRides\Shared\Infrastructure\PostgresEventStore'
        arguments:
            $aggregateEventFactory: '@App\BikeRides\Rides\Domain\Model\Ride\Event\RideEventFactory'
            $dbTableName: 'rides.event_store'

    #
    # Shared
    #

    App\BikeRides\Shared\Infrastructure\SymfonyCommandBus:
        arguments:
            - '@command.bus'

    App\BikeRides\Shared\Infrastructure\SymfonyAggregateEventsBus:
        arguments:
            - '@aggregate_events.bus'

    App\BikeRides\Shared\Infrastructure\SymfonyDomainEventBus:
        arguments:
            - '@domain_event.bus'

when@test:
    services:
        App\Tests\BikeRides\Shared\Doubles\DomainEventSubscribersLocatorProxy:
            decorates: 'domain_event.bus.messenger.handlers_locator'
            arguments:
                - '@App\Tests\BikeRides\Shared\Doubles\DomainEventSubscribersLocatorProxy.inner'

        App\Tests\BikeRides\Rides\Doubles\RouteFetcherStub: ~
        App\Tests\BikeRides\Rides\Doubles\BikeLocationFetcherStub: ~

        App\BikeRides\Rides\Domain\Model\Ride\RouteFetcher: '@App\Tests\BikeRides\Rides\Doubles\RouteFetcherStub'
        App\BikeRides\Rides\Application\Command\RefreshBikeLocation\BikeLocationFetcher: '@App\Tests\BikeRides\Rides\Doubles\BikeLocationFetcherStub'
