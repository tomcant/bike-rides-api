name: Deploy

on:
  push:
    branches:
      - main

concurrency: deploy

jobs:
  test:
    uses: tomcant/bike-rides-api/.github/workflows/test.yml@main

  deploy-staging:
    name: "Deploy staging ${{ matrix.app }}"
    needs: test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        app:
          - bikes
          - rides
          - billing
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.APP_DEPLOYER_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: eu-west-1

      - name: Build tooling Docker image
        run: docker build -f docker/Dockerfile -t bike-rides-api:latest docker/

      - name: Install dependencies
        run: |
          docker run \
            -v $(pwd)/apps/${{ matrix.app }}:/var/task \
            -v $(pwd)/packages:/var/packages \
            -e COMPOSER_MIRROR_PATH_REPOS=1 \
            bike-rides-api:latest \
              composer install --no-dev --no-interaction --no-ansi --classmap-authoritative --no-scripts

      - name: Clear Symfony cache
        run: |
          docker run \
            -v $(pwd)/apps/${{ matrix.app }}:/var/task \
            -v $(pwd)/var/cache:/tmp/cache \
            -e APP_ENV=prod \
            bike-rides-api:latest \
              bin/console cache:clear --no-debug --no-interaction

      - name: Deploy to Lambda
        run: |
          docker run \
            -v $(pwd)/apps/${{ matrix.app }}:/var/task \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN \
            bike-rides-api:latest \
              serverless deploy --verbose --conceal --stage staging --region "${AWS_REGION}"

      - name: Run database migrations
        env:
          SERVERLESS_IMAGE: bike-rides-api:latest
        run: apps/${{ matrix.app }}/bin/lambda-console staging "doctrine:migrations:migrate --no-interaction"

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Symfony console Docker image and push to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ matrix.app }}-api-console-staging
        run: |
          docker build -f docker/Dockerfile.console -t $REGISTRY/$REPOSITORY:latest $(pwd)/apps/${{ matrix.app }}
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Update domain event outbox workers
        run: |
          export INSTANCE_ID=$( \
            aws ec2 describe-instances \
              --filter 'Name=tag:Name,Values=api-db-staging' 'Name=instance-state-name,Values=running' \
                  | jq -r '.Reservations[0].Instances[0].InstanceId' \
          )
          aws ssm send-command \
            --document-name AWS-RunShellScript \
            --targets '[{"Key":"InstanceIds","Values":["'${INSTANCE_ID}'"]}]' \
            --parameters '{"commands":["/opt/domain-event-outbox-worker/setup.sh '${{ matrix.app }}'"],"executionTimeout":["300"]}'
